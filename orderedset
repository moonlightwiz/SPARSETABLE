#include <bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using ordered_set = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update> ;

int main() {

    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    ordered_set<int>st;
    // 0 based indexing in ordered set
    
    for(int i=1;i<=10;i++)
        {
            st.insert(i);
        }

    // think of order as index and key as value
    
    cout<<"size of ordered set : "<<st.size()<<endl;

    cout<<"element at index 2 : "<<*st.find_by_order(2)<<endl;
    // note the * in find by order

    cout<<"index of element 5 : "<<st.order_of_key(5)<<endl;

    cout<<"index of element 100 : "<<st.order_of_key(100)<<endl; 
    // similar to lower_bound in a sorted array
    // if the element exists in the set then it prints its index and if it does not exist then it
    // prints the index where the element would be if it present in the sorted array


    if(st.find(7)==st.end())
    {
        cout<<"7 not present in the set \n";
    }
    else{
        cout<<"7 is present in the set \n";
    }
    
    st.erase(7);
    // erases element with value 7

    cout<<"printing the set after deletion of 7 : ";
    for(auto it:st)
        {
            cout<<it<<" ";
        }
    cout<<endl;

    if(st.find(7)==st.end())
    {
        cout<<"7 not present in the set \n";
    }
    else{
        cout<<"7 is present in the set \n";
    }

// st.count(x) has no meaning here as every element can only be present once at max so use st.find() instead
    
    return 0;
}
